<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>A Curious Quest for Code and Clarity on</title><link>https://acqcc.blog/</link><description>Recent content in A Curious Quest for Code and Clarity on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://acqcc.blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://acqcc.blog/notes/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/setup/</guid><description>Making your own Quartz Setting up Quartz requires a basic understanding of git. If you are unfamiliar, this resource is a great place to start!</description></item><item><title>Editing Content in Quartz</title><link>https://acqcc.blog/notes/editing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/editing/</guid><description>Editing Quartz runs on top of Hugo so all notes are written in Markdown.
Folder Structure Here&amp;rsquo;s a rough overview of what&amp;rsquo;s what.</description></item><item><title>Obsidian Vault Integration</title><link>https://acqcc.blog/notes/obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/obsidian/</guid><description>Setup Obsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.</description></item><item><title>Preview Changes</title><link>https://acqcc.blog/notes/preview-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/preview-changes/</guid><description>If you&amp;rsquo;d like to preview what your Quartz site looks like before deploying it to the internet, the following instructions guide you through installing the proper dependencies to run it locally.</description></item><item><title>Deploying Quartz to the Web</title><link>https://acqcc.blog/notes/hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/hosting/</guid><description>Hosting on GitHub Pages Quartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go!</description></item><item><title>AGI Will Never Be Hostile But Humans Will</title><link>https://acqcc.blog/posts/AGI-Will-Never-Be-Hostile-But-Humans-Will/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/posts/AGI-Will-Never-Be-Hostile-But-Humans-Will/</guid><description>Why emergence of consciousness is unique to humans and how AGI is on track to replace us.</description></item><item><title>Beatles is Overrated AF</title><link>https://acqcc.blog/posts/Beatles-is-Overrated-AF/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/posts/Beatles-is-Overrated-AF/</guid><description>What names comes to mind when I say overrated and boring.</description></item><item><title>GPT4 Generates Color Palette</title><link>https://acqcc.blog/notes/GPT4-Generates-Color-Palette/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/GPT4-Generates-Color-Palette/</guid><description>Is rewriting a 306 line syntax color profile intelligence</description></item><item><title>GPT4 Generates Color Palette</title><link>https://acqcc.blog/thoughts/GPT4-Generates-Color-Palette/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/thoughts/GPT4-Generates-Color-Palette/</guid><description>Is rewriting a 306 line syntax color profile intelligence</description></item><item><title>hardest problems in CS</title><link>https://acqcc.blog/thoughts/hardest-problems-in-CS/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/thoughts/hardest-problems-in-CS/</guid><description>design a CSS class that will simultaneously center and uncenter itself, it&amp;rsquo;s position uncertain until it&amp;rsquo;s observed by the user, while simultaneously inverting a binary tree representation of a doubly linked list, meanwhile parallelizing a multi-threaded distributed systems architecture with a byzantine fault-tolerant consensus algorithm</description></item><item><title>Kaleidoscope Eyes</title><link>https://acqcc.blog/posts/Kaleidoscope-Eyes/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/posts/Kaleidoscope-Eyes/</guid><description>Kaleidoscope Eyes sparkle at the world, my emerald city downtown girl</description></item><item><title>Kaliedescope Eyes</title><link>https://acqcc.blog/posts/Kaliedescope-Eyes/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/posts/Kaliedescope-Eyes/</guid><description>Kaliedescope Eyes sparkle at the world, my emerald city downtown girl</description></item><item><title>Why God is Dead Forever No Matter What</title><link>https://acqcc.blog/posts/Why-God-is-Dead-Forever-No-Matter-What/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/posts/Why-God-is-Dead-Forever-No-Matter-What/</guid><description>lorem ipsum</description></item><item><title>278. First Bad Version</title><link>https://acqcc.blog/dsa/278.-First-Bad-Version/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/278.-First-Bad-Version/</guid><description>Problem Statement First Bad Version - LeetCode
Tags: #dsadeck #arrays #completed / #incomplete Pattern: [[Binary Search#Floor Ceil]] Similar to: Peak Index in a Mountain Array - LeetCode | Valid Mountain Array - LeetCode</description></item><item><title>The Theory Of Science</title><link>https://acqcc.blog/notes/The-Theory-Of-Science/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/The-Theory-Of-Science/</guid><description>This is what science is telling you son!</description></item><item><title/><link>https://acqcc.blog/dsa/1.-Two-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1.-Two-Sum/</guid><description>Metadata Date Created: [[2021-10-17]] Tags: Related: Resources: Two Sum - LeetCode
#dsadeck
Solutions Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</description></item><item><title/><link>https://acqcc.blog/dsa/1008.-Construct-Binary-Search-Tree-from-Preorder-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1008.-Construct-Binary-Search-Tree-from-Preorder-Traversal/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related: [[98. Validate BST]]
Ranged Solution From [[98. Validate BST]]
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int i = 0; private TreeNode validate(int[] pre, int min, int max) { if(i &amp;gt;= pre.</description></item><item><title/><link>https://acqcc.blog/dsa/101.-Symmetric-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/101.-Symmetric-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean compare (TreeNode A, TreeNode B){ if(A == null &amp;amp;&amp;amp; B == null) return true; // both null if(A == null || B == null) return false; // one of them null if(A.</description></item><item><title/><link>https://acqcc.blog/dsa/1049.-Last-Stone-Weight-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1049.-Last-Stone-Weight-II/</guid><description>Problem Statement [Last Stone Weight II - LeetCode]( https://leetcode.com/problems/last-stone-weight-ii/ Aditya Verma : Minimum Subset Difference
Tags: #dsadeck #dp Pattern: [[Pattern DP Subset Sum]] Related: [[416.</description></item><item><title/><link>https://acqcc.blog/dsa/105.-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/105.-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[106. Construct Binary Tree from Inorder and Postorder Traversal]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 int[] preOrder; int[] inOrder; private TreeNode build(int pre, int inStart, int inEnd) { if (pre &amp;gt; preOrder.</description></item><item><title/><link>https://acqcc.blog/dsa/106.-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/106.-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[105. Construct Binary Tree from Preorder and Inorder Traversal]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 int[] preOrder; int[] postOrder; int[] inOrder; int index; // find position of rootVal in inorder arr int posInorder(int start, int rootVal) { while (inOrder[start] !</description></item><item><title/><link>https://acqcc.blog/dsa/114.-Flatten-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/114.-Flatten-Binary-Tree/</guid><description>Problem Statement 114. Flatten Binary Tree to Linked List - LeetCode
Morris Travel Solution [[Morris Traversals of Binary Tree]]</description></item><item><title/><link>https://acqcc.blog/dsa/1143.-Longest-Common-Subsequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1143.-Longest-Common-Subsequence/</guid><description>Problem Statement Tags: #dsadeck #strings #dp Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Integer[][] cache; public int longestCommonSubsequence(String text1, String text2) { cache = new Integer[text1.</description></item><item><title/><link>https://acqcc.blog/dsa/1161.-Maximum-Level-Sum-of-a-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1161.-Maximum-Level-Sum-of-a-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[BT Sum at Kth Level]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public int maxLevelSum (Node root){ int level = 0, sum = 0, maxSum = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/121.-Best-Time-to-Buy-and-Sell-Stock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/121.-Best-Time-to-Buy-and-Sell-Stock/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 public int maxProfit (int[] prices){ int max_price = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/1217.-Minimum-Cost-to-Move-Chips-to-The-Same-Position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1217.-Minimum-Cost-to-Move-Chips-to-The-Same-Position/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 public int minCostToMoveChips(int[] position) { int evenCount = 0, oddCount = 0; for(int pos : position) if((pos &amp;amp; 1) == 0) evenCount++; else oddCount++; return Math.</description></item><item><title/><link>https://acqcc.blog/dsa/128.-Longest-Consecutive-Sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/128.-Longest-Consecutive-Sequence/</guid><description>Problem Statement Tags: #dsadeck #arrays #subarrays #set Pattern:
Naive Solution Freq Array / HashSet Approach
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int longestConsecutive1 (int[] nums){ if(nums.</description></item><item><title/><link>https://acqcc.blog/dsa/1295.-Find-Numbers-with-Even-Number-of-Digits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1295.-Find-Numbers-with-Even-Number-of-Digits/</guid><description>Problem Statement Find Numbers with Even Number of Digits - LeetCode
Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 public int findNumbers(int[] nums) { int even = 0; for(int i = 0; i &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/13.-Roman-to-Integer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/13.-Roman-to-Integer/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public int value (char ch) { switch (ch) { case &amp;#39;I&amp;#39; : return 1; case &amp;#39;V&amp;#39; : return 5; case &amp;#39;X&amp;#39; : return 10; case &amp;#39;L&amp;#39; : return 50; case &amp;#39;C&amp;#39; : return 100; case &amp;#39;D&amp;#39; : return 500; default : return 1000; } } public int romanToInt(String s) { int prev = -1, sum = 0; for (char ch : s.</description></item><item><title/><link>https://acqcc.blog/dsa/1304.-Find-N-Unique-Integers-Sum-up-to-Zero/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1304.-Find-N-Unique-Integers-Sum-up-to-Zero/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // simple approach public int[] sumZero1(int n) { int[] res = new int[n]; for (int i = 0 ; i &amp;lt; n-1 ; i++) res[i++] = i+1; // add last element -&amp;gt; -ve sum of elements b4 n res[--n] = -n * (n+1) / 2; return res; } // robust approach (n &amp;gt;= 10^5) public int[] sumZero(int n) { int[] res = new int[n]; for (int i = 0; i &amp;lt; n; i++) res[i] = 2*i - n +1; return res; } Notes First Appraoch is simple and straight fwd Fill array with numbers upto n-1 last element is the negative sum of all the numbers Second approach is robust with large range of n [Java/C++/Python] Find the Rule - LeetCode Discuss Basically it will give you a patttern like this.</description></item><item><title/><link>https://acqcc.blog/dsa/1312.-Minimum-Insertion-Steps-to-Make-a-String-Palindrome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1312.-Minimum-Insertion-Steps-to-Make-a-String-Palindrome/</guid><description>Problem Statement Minimum Insertion Steps to Make a String Palindrome - LeetCode
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Integer[][] cache; /// return smallest uncommon subsequence public int dp (char[] s, int start, int end) { if(start &amp;lt;= end) return 0; if(cache[start][end] !</description></item><item><title/><link>https://acqcc.blog/dsa/1365.-How-Many-Numbers-Are-Smaller-Than-the-Current-Number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1365.-How-Many-Numbers-Are-Smaller-Than-the-Current-Number/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // freq array prefix sum O(n) public int[] smallerNumbersThanCurrent(int[] nums) { // this method is viable since nums[i] &amp;lt; 100 final int MAX = 101; //create freq arr int[] freq = new int[MAX]; for (int i = 0; i &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/1380.-Lucky-Numbers-in-a-Matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1380.-Lucky-Numbers-in-a-Matrix/</guid><description>Problem Statement Tags: #dsadeck #arrays #matrix Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public List&amp;lt;Integer&amp;gt; luckyNumbers(int[][] matrix) { // min max arrays int[] minRow = new int[matrix.</description></item><item><title/><link>https://acqcc.blog/dsa/1382.-Balance-a-Binary-Search-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1382.-Balance-a-Binary-Search-Tree/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Trivial Solutions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ArrayList&amp;lt;TreeNode&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); void inorder(TreeNode root) { if(root == null) return; inorder(root.</description></item><item><title/><link>https://acqcc.blog/dsa/1389.-Create-Target-Array-in-the-Given-Order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1389.-Create-Target-Array-in-the-Given-Order/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution O(n^2) solution
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int[] createTargetArray (int[] nums, int[] index){ // create target arr int[] target = new int[nums.</description></item><item><title/><link>https://acqcc.blog/dsa/139.-Word-Break/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/139.-Word-Break/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Boolean[] cache; HashSet&amp;lt;String&amp;gt; dict; public boolean dp(String S, int start) { if(start &amp;gt;= S.</description></item><item><title/><link>https://acqcc.blog/dsa/14.-Longest-Common-Prefix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/14.-Longest-Common-Prefix/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 public String longestCommonPrefix(String[] strs) { int limit = strs[0].</description></item><item><title/><link>https://acqcc.blog/dsa/140.-Word-Break-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/140.-Word-Break-II/</guid><description>Problem Statement Word Break II - LeetCode
Tags: #dsadeck #strings Pattern: Related: [[139. Word Break]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 HashSet&amp;lt;String&amp;gt; dict; ArrayList&amp;lt;String&amp;gt; res; public void dp (String S, int start, StringBuilder sb) { if(start &amp;gt;= S.</description></item><item><title/><link>https://acqcc.blog/dsa/142.-Linked-List-Cycle-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/142.-Linked-List-Cycle-II/</guid><description>Problem Statement Linked List Cycle II - LeetCode Tags: #dsadeck #arrays Pattern: [[Pattern Fast and Slow Pointer}]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public ListNode detectCycle(ListNode head) { ListNode slow = head, fast = head; while (fast !</description></item><item><title/><link>https://acqcc.blog/dsa/1448.-Count-Good-Nodes-in-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1448.-Count-Good-Nodes-in-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int helper(TreeNode root, int max) { int count = 0; if(root == null) return count; if(root.</description></item><item><title/><link>https://acqcc.blog/dsa/1470.-Shuffle-the-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1470.-Shuffle-the-Array/</guid><description>Problem Statement Shuffle the Array - LeetCode Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].</description></item><item><title/><link>https://acqcc.blog/dsa/148.-Sort-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/148.-Sort-List/</guid><description>Problem Statement Tags: #dsadeck #arrays #linkedlist #tododryrun Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 private ListNode getMid (ListNode head) { ListNode slow = head, fast = head; fast = fast.</description></item><item><title/><link>https://acqcc.blog/dsa/15.-3Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/15.-3Sum/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Two Pointer]] Related:
2 Pointer Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; threeSum (int[] num){ Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/1512.-Number-of-Good-Pairs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1512.-Number-of-Good-Pairs/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 public int numIdenticalPairs (int[] nums){ HashMap&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); // count how many times has this element been repeated in the past for each repetition.</description></item><item><title/><link>https://acqcc.blog/dsa/1574.-Shortest-Subarray-Removed-to-Make-Array-Sorted/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1574.-Shortest-Subarray-Removed-to-Make-Array-Sorted/</guid><description>Problem Statement Shortest Subarray to be Removed to Make Array Sorted - LeetCode
Tags: #easy #arrays #incomplete #subarrays #twopointer #dsadeck Pattern: [[Pattern Two Pointer]]</description></item><item><title/><link>https://acqcc.blog/dsa/160.-Intersection-of-Two-Linked-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/160.-Intersection-of-Two-Linked-Lists/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution Works even if no intersection
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public ListNode getIntersectionNode (ListNode headA, ListNode headB){ int lenA = getLen(headA), lenB = getLen(headB); while(lenA &amp;gt; lenB){ headA = headA.</description></item><item><title/><link>https://acqcc.blog/dsa/169.-Majority-Element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/169.-Majority-Element/</guid><description>Problem Statement Tags: #dsadeck #arrays #arithmetic Pattern: [[Pattern Boyer Moore&amp;rsquo;s Voting Algorithm]] Related: [[229. Majority Element II]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int majorityElement (int[] nums){ int major = nums[0], count = 1; for (int num : nums) { // update count if(num == major) count++; else count--; // count = 0 -&amp;gt; reset major if (count == 0) { major = num; count = 1; } } return major; } Notes Concept For an element to be a majority element, it needs to appear more than n/2 times in an array.</description></item><item><title/><link>https://acqcc.blog/dsa/1721.-Swapping-Nodes-in-a-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1721.-Swapping-Nodes-in-a-Linked-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 void swap(ListNode pa, ListNode pb){ // swap parents ListNode a = pa.</description></item><item><title/><link>https://acqcc.blog/dsa/1749.-Maximum-Absolute-Sum-of-Any-Subarray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1749.-Maximum-Absolute-Sum-of-Any-Subarray/</guid><description>#dsadeck
Problem Statement Maximum Absolute Sum of Any Subarray - LeetCode
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, .</description></item><item><title/><link>https://acqcc.blog/dsa/1773.-Count-Items-Matching-a-Rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1773.-Count-Items-Matching-a-Rule/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public int countMatches (List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; items, String ruleKey, String ruleValue){ // available properties String[] ruleKeys = {&amp;#34;type&amp;#34;, &amp;#34;color&amp;#34;, &amp;#34;name&amp;#34;}; // find RuleKeyNo.</description></item><item><title/><link>https://acqcc.blog/dsa/1832.-Check-if-the-Sentence-Is-Pangram/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1832.-Check-if-the-Sentence-Is-Pangram/</guid><description>Problem Statement Tags: #dsadeck #arrays #strings Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public boolean checkIfPangram (String sentence){ boolean[] charPresent = new boolean[26]; // mark all chars present as true for (char c : sentence.</description></item><item><title/><link>https://acqcc.blog/dsa/1854.-Maximum-Population-Year/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1854.-Maximum-Population-Year/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public int maximumPopulation (int[][] logs){ final int MIN_YEAR = 1950, MAX_YEAR = 2050; int[] population = new int[MAX_YEAR-MIN_YEAR+1]; // for each log for(int[] log : logs){ // increment birth year population population[log[0]-1950]++; // decrement death year population population[log[1]-1950]--; } // convert to prefix sum to get true population for (int i = 1; i &amp;lt; population.</description></item><item><title/><link>https://acqcc.blog/dsa/1920.-Build-Array-from-Permutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1920.-Build-Array-from-Permutation/</guid><description>Problem Statement Build Array from Permutation - LeetCode
Tags: #dsadeck #arrays Pattern: [[Pattern 2 values in 1 variable]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int[] buildArray(int[] nums) { int n = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/1963.-Minimum-Number-of-Swaps-to-Make-the-String-Balanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1963.-Minimum-Number-of-Swaps-to-Make-the-String-Balanced/</guid><description>Problem Statement Minimum Number of Swaps to Make the String Balanced - LeetCode
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int minSwaps(String s) { int stackSize = 0, rev = 0; // reversal count for (char ch : s.</description></item><item><title/><link>https://acqcc.blog/dsa/198.-House-Robber/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/198.-House-Robber/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Recursive Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 private class Pair { int inSum; int exSum; Pair (int inSum, int exSum) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/1980.-Find-Unique-Binary-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/1980.-Find-Unique-Binary-String/</guid><description>Problem Statement Tags: #easy #arrays #tbdone Pattern:
Solution https://leetcode.com/problems/find-unique-binary-string/discuss/1418687/Detailed-Explanation-O(N)-Java-C++-Python-short-concise-code-Cantor's-Diagonalization
https://leetcode.com/problems/find-unique-binary-string/discuss/1418713/No-Recursion-or-Think-in-other-way-or-Python
Notes</description></item><item><title/><link>https://acqcc.blog/dsa/2.-Add-Two-Numbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/2.-Add-Two-Numbers/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 Extra Linked List solution
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public ListNode addTwoNumbers (ListNode l1, ListNode l2) { ListNode ans = new ListNode(-1), ansHead = ans; int carry = 0; while (l1 !</description></item><item><title/><link>https://acqcc.blog/dsa/2027.-Minimum-Moves-to-Convert-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/2027.-Minimum-Moves-to-Convert-String/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 public int minimumMoves(String s) { int steps = 0, i = 0, len = s.</description></item><item><title/><link>https://acqcc.blog/dsa/2053.-Kth-Distinct-String-in-an-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/2053.-Kth-Distinct-String-in-an-Array/</guid><description>Problem Statement Tags: #easy #arrays #completed #dsadeck Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public static String kthDistinct (String[] arr, int k){ HashMap hm = new HashMap&amp;lt;String, Integer&amp;gt;(); // insert into hashmap for (String str : arr) { int count = 0; if(hm.</description></item><item><title/><link>https://acqcc.blog/dsa/206.-Reverse-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/206.-Reverse-Linked-List/</guid><description>Problem Statement Reverse Linked List - LeetCode
Tags: #dsadeck #linkedlist Pattern: Related:[[Reverse LinkedList in Groups of K]]
Iterative Solution 1 2 3 4 5 6 7 8 9 10 11 public ListNode reverseList (ListNode head){ ListNode prev = null, current = head; // next not init cuz head could be null while(current !</description></item><item><title/><link>https://acqcc.blog/dsa/209.-Minimum-Size-Subarray-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/209.-Minimum-Size-Subarray-Sum/</guid><description>Problem Statement Tags: #dsadeck #arrays #completed Pattern: [[Pattern Sliding Window]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static int minSubArrayLen(int target, int[] nums) { int start = 0, end = 0, min = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/215.-Kth-Largest-Element-in-an-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/215.-Kth-Largest-Element-in-an-Array/</guid><description>Problem Statement Tags: #easy #arrays #tbdone Pattern: [[Pattern Order Of Statistics]]
Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public static int findKthLargestLib (int[] nums, int k) { PriorityQueue&amp;lt;Integer&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(); int index = 0; while(k-- &amp;gt; 0) { pq.</description></item><item><title/><link>https://acqcc.blog/dsa/226.-Invert-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/226.-Invert-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 public Node invertTree (Node root){ if(root == null) return null; // swap Node temp = root.</description></item><item><title/><link>https://acqcc.blog/dsa/229.-Majority-Element-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/229.-Majority-Element-II/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 public List&amp;lt;Integer&amp;gt; majorityElement(int[] nums) { int count1 = 0, count2 = 0, major1 = -1, major2 = -1; // get major1 and major2 for (int num : nums) { if (num == major1) count1++; else if (num == major2) count2++; else if (count1 == 0) { major1 = num; count1 = 1; } else if (count2 == 0) { major2 = num; count2 = 1; } else { count1--; count2--; } } // check count of major1 and major2 count1 = count2 = 0; for (int num : nums) if (num == major1) count1++; else if (num == major2) count2++; // add majors to result List&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); if (count1 &amp;gt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/2293.-Min-Max-Game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/2293.-Min-Max-Game/</guid><description>Problem Statement Min Max Game - LeetCode Contest
Tags: #dsadeck #arrays #contest #binarytrees Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public int minMaxGame(int[] nums) { // exit condition if(nums.</description></item><item><title/><link>https://acqcc.blog/dsa/2294.-Partition-Array-Such-That-Maximum-Difference-Is-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/2294.-Partition-Array-Such-That-Maximum-Difference-Is-K/</guid><description>Problem Statement Partition Array Such That Maximum Difference Is K - LeetCode Contest
Tags: #dsadeck #arrays #subarrays Pattern: [[Pattern Sliding Window]]</description></item><item><title/><link>https://acqcc.blog/dsa/23.-Merge-k-Sorted-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/23.-Merge-k-Sorted-Lists/</guid><description>Problem Statement Tags: #dsadeck #arrays #heap #linkedlist Pattern:
Merge Solution 250ms O(n^2) and recursion -&amp;gt; function calling time O(1) space complexity [[Flatten a Linked List#Merge Sort Solution]]</description></item><item><title/><link>https://acqcc.blog/dsa/230.-Kth-Smallest-Element-in-a-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/230.-Kth-Smallest-Element-in-a-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Iterative Inorder Traversal Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int kthSmallest(TreeNode root, int k) { Deque&amp;lt;TreeNode&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;(); while(root!</description></item><item><title/><link>https://acqcc.blog/dsa/236.-Lowest-Common-Ancestor-of-a-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/236.-Lowest-Common-Ancestor-of-a-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if(root == null) return null; if(root == p || root == q) return root; TreeNode left = lowestCommonAncestor(root.</description></item><item><title/><link>https://acqcc.blog/dsa/238.-Product-of-Array-Except-Self/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/238.-Product-of-Array-Except-Self/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Prefix Array]]
Naive Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public int[] productExceptSelf(int[] nums) { int prod = 1, zero = 0; for (int num : nums) if (num == 0) zero++; else prod *= num; for (int i = 0; i &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/25.-Reverse-Nodes-in-k-Group/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/25.-Reverse-Nodes-in-k-Group/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Simliar to [[Reverse LinkedList in Groups of K]] except If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</description></item><item><title/><link>https://acqcc.blog/dsa/26.-Remove-Duplicates-from-Sorted-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/26.-Remove-Duplicates-from-Sorted-Array/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Ghost Array]] Related: [[80. Remove Duplicates from Sorted Array II]] [[27. Remove Element]]</description></item><item><title/><link>https://acqcc.blog/dsa/268.-Missing-Number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/268.-Missing-Number/</guid><description>Problem Statement Tags: #easy #arrays #completed #dsadeck Pattern: [[Pattern 1-n range array]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public void swap(int[] x, int a, int b) { int t = x[a]; x[a] = x[b]; x[b] = t; } public int missingNumber(int[] nums) { int n = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/27.-Remove-Element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/27.-Remove-Element/</guid><description>Metadata Date Created: [[2021-10-19]] Tags: #dsadeck Related: Resources: Remove Element - LeetCode
Problem Statement Given an integer array nums and an integer val, remove all occurrences of val in nums in-place.</description></item><item><title/><link>https://acqcc.blog/dsa/287.-Find-the-Duplicate-Number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/287.-Find-the-Duplicate-Number/</guid><description>Problem Statement Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.</description></item><item><title/><link>https://acqcc.blog/dsa/295.-Find-Median-from-Data-Stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/295.-Find-Median-from-Data-Stream/</guid><description>Problem Statement Find Median from Data Stream - LeetCode
Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 public class FindMedianinStream295 { static class MedianFinder { private PriorityQueue&amp;lt;Integer&amp;gt; lMax; private PriorityQueue&amp;lt;Integer&amp;gt; rMin; private double currMedian; // constructor public MedianFinder() { lMax = new PriorityQueue&amp;lt;&amp;gt;(Collections.</description></item><item><title/><link>https://acqcc.blog/dsa/297.-Serialize-and-Deserialize-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/297.-Serialize-and-Deserialize-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[652. Find Duplicate Subtrees]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // preorder build string fun void preString(TreeNode root, StringBuilder sb) { if (root == null) { sb.</description></item><item><title/><link>https://acqcc.blog/dsa/31.-Next-Permutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/31.-Next-Permutation/</guid><description>Problem Statement Tags: #dsadeck #arrays #permutation Pattern: [[Next Permutation]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public static void swap(int[] x, int a, int b) { int t = x[a]; x[a] = x[b]; x[b] = t; } public void nextPermutation(int[] nums){ if (nums.</description></item><item><title/><link>https://acqcc.blog/dsa/315.-Count-of-Smaller-Numbers-After-Self/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/315.-Count-of-Smaller-Numbers-After-Self/</guid><description>Problem Statement Count of Smaller Numbers After Self - LeetCode Tags: #dsadeck #arrays Pattern: [[Merge Sort]]
Naive Solution 1 2 3 4 5 6 7 8 9 10 public List&amp;lt;Integer&amp;gt; countSmaller1(int[] nums) { ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/316.-Remove-Duplicate-Letters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/316.-Remove-Duplicate-Letters/</guid><description>Problem Statement Tags: #dsadeck #strings #stacks Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public String removeDuplicateLetters(String s) { // find smallest char int[] lastIndex = new int[26]; char[] chars = s.</description></item><item><title/><link>https://acqcc.blog/dsa/34.-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/34.-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</guid><description>Problem Statement Tags: #medium #arrays #completed #binarysearch Pattern: [[Binary Search]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 static int search(int[] nums, int target, boolean findLeft) { int start = 0, end = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/35.-Search-Insert-Position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/35.-Search-Insert-Position/</guid><description>Metadata Problem Statement Tags: #easy #arrays #dsadeck #binarysearch Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public int searchInsert(int[] nums, int target) { // perform binary search int start = 0, end = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/372.-Super-Pow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/372.-Super-Pow/</guid><description> Super Pow - LeetCode
Problem Statement Tags: #dsadeck #arrays #completed / #incomplete Pattern: [[Pattern Modulo]]
Solution Notes</description></item><item><title/><link>https://acqcc.blog/dsa/378.-Kth-Smallest-Element-in-a-Sorted-Matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/378.-Kth-Smallest-Element-in-a-Sorted-Matrix/</guid><description>Problem Statement Tags: #easy #arrays #tbdone #dsadeck Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public int kthSmallest(int[][] matrix, int k) { // prepare min-heap int n = matrix.</description></item><item><title/><link>https://acqcc.blog/dsa/38.-Count-and-Say/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/38.-Count-and-Say/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public String countAndSay(int n) { if (n &amp;lt;= 1) return &amp;#34;1&amp;#34;; String num = countAndSay(n - 1); int count = 0; char curr = num.</description></item><item><title/><link>https://acqcc.blog/dsa/4.-Median-of-Two-Sorted-Arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/4.-Median-of-Two-Sorted-Arrays/</guid><description>Problem Statement Tags: #dsadeck #arrays #hard #incomplete Pattern: [[Binary Search]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public double findMedianSortedArrays(int[] a, int[] b) { int n1 = a.</description></item><item><title/><link>https://acqcc.blog/dsa/41.-First-Missing-Positive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/41.-First-Missing-Positive/</guid><description>Problem Statement First Missing Positive - LeetCode Apna College Video
Tags: #hard #arrays #incomplete #dsadeck Related: [[Pattern 1-n range array]]</description></item><item><title/><link>https://acqcc.blog/dsa/416.-Partition-Equal-Subset-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/416.-Partition-Equal-Subset-Sum/</guid><description>Problem Statement Partition Equal Subset Sum - LeetCode Subset Sum Problem : Find if there is a subset in array whose sum equals target</description></item><item><title/><link>https://acqcc.blog/dsa/42-Trapping-Rain-Water/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/42-Trapping-Rain-Water/</guid><description>Problem Statement Tags: #dsadeck #arrays #tboptimised Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 public int[] getWaterHeight (int[] arr, int n) { int end = 0, start = 0; int[] waterHeight = new int[n]; while(end &amp;lt; n-1) { end++; // if taller block found if(arr[end] &amp;gt;= arr[start]){ // store start height int wh = arr[start]; // rewrite waterHeight[start] upto end with wh while (start &amp;lt; end) waterHeight[start++] = wh; } } System.</description></item><item><title/><link>https://acqcc.blog/dsa/435.-Non-Overlapping-Intervals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/435.-Non-Overlapping-Intervals/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 public int eraseOverlapIntervals(int[][] intervals) { Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/437.-Path-Sum-III/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/437.-Path-Sum-III/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int pre(TreeNode root, int target, HashMap&amp;lt;Integer, Integer&amp;gt; map, int currSum) { if(root == null) return 0; currSum += root.</description></item><item><title/><link>https://acqcc.blog/dsa/44.-Wildcard-Matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/44.-Wildcard-Matching/</guid><description>Problem Statement Wildcard Matching - LeetCode
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Boolean cache[][]; public boolean dp (char[] s, char[] p, int i, int j) { if(i == s.</description></item><item><title/><link>https://acqcc.blog/dsa/442.-Find-All-Duplicates-in-an-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/442.-Find-All-Duplicates-in-an-Array/</guid><description>Problem Statement Find All Duplicates in an Array - LeetCode Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.</description></item><item><title/><link>https://acqcc.blog/dsa/448.-Find-All-Numbers-Disappeared-in-an-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/448.-Find-All-Numbers-Disappeared-in-an-Array/</guid><description>Problem Statement Tags: #easy #arrays #completed #dsadeck Related : [[Pattern 1-n range array]] [[41. First Missing Positive]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // self-freq array approach public List&amp;lt;Integer&amp;gt; findDisappearedNumbers (int[] nums){ // code here List&amp;lt;Integer&amp;gt; missing = new ArrayList&amp;lt;&amp;gt;(); // mark indices of array values as negative for (int num : nums){ int absNum = Math.</description></item><item><title/><link>https://acqcc.blog/dsa/452.-Minimum-Number-of-Arrows-to-Burst-Balloons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/452.-Minimum-Number-of-Arrows-to-Burst-Balloons/</guid><description>Problem Statement Tags: #dsadeck #intervals #greedy Pattern: [[Pattern Activity Selection Problem]] Related: [[435. Non-Overlapping Intervals]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 public int findMinArrowShots (int[][] points){ Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/46.-Permutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/46.-Permutations/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans; void solve(vector&amp;lt;int&amp;gt; &amp;amp;nums, int t) { if (t == nums.</description></item><item><title/><link>https://acqcc.blog/dsa/494.-Target-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/494.-Target-Sum/</guid><description>Problem Statement Tags: #dsadeck #dp Pattern: [[Pattern DP Subset Partitioning ]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 HashMap&amp;lt;Integer, Integer&amp;gt;[] cache; int find(int[] nums, int target, int n, int currSum) { if (n &amp;lt; 0 &amp;amp;&amp;amp; currSum == target) return 1; if (n &amp;lt; 0) return 0; // check entry in cache HashMap&amp;lt;Integer, Integer&amp;gt; entry = cache[n]; if(entry !</description></item><item><title/><link>https://acqcc.blog/dsa/50.-Powx-n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/50.-Powx-n/</guid><description>Problem Statement Tags: #easy #arithmetic #completed #ChabraQuestion Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 static class Solution { public static double simplePow(double x, int n) { if (n == 0) return 1; if (n &amp;lt; 0) return (1 / x) * (simplePow(1 / x, -(n + 1))); double result = simplePow(x, n - 1); return result * x; } public static double myPow(double x, int n) { // exit condition if (n == 0) return 1; if (n &amp;lt; 0) return 1 / x * myPow(1 / x, -(n + 1)); // n=int.</description></item><item><title/><link>https://acqcc.blog/dsa/523.-Continuous-Subarray-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/523.-Continuous-Subarray-Sum/</guid><description>Problem Statement Tags: #dsadeck #arrays #completed Pattern: [[Pattern Prefix Array]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static boolean checkSubArraySum(int[] nums, int k) { if (k == 0) return true; Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); int currSumMod = 0, index = -1; map.</description></item><item><title/><link>https://acqcc.blog/dsa/53.-Maximum-Subarray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/53.-Maximum-Subarray/</guid><description>Problem Statement Maximum Subarray - LeetCode
Tags: #easy #arrays #completed #subarrays #dsadeck Pattern: [[Pattern Kadane&amp;rsquo;s Algorithm]]
Solution 1 2 3 4 5 6 7 8 9 public static int maxSubArray (int[] nums){ int max = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/55.-Jump-Game/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/55.-Jump-Game/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 public boolean canJump(int[] nums) { if(nums.</description></item><item><title/><link>https://acqcc.blog/dsa/56.-Merge-Intervals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/56.-Merge-Intervals/</guid><description>Problem Statement Tags: #dsadeck #arrays #intervals Pattern: Related: [[435. Non-Overlapping Intervals]], 252 Meeting Rooms 253 Meeting Rooms II
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public int[][] merge (int[][] intervals){ // Sort by interval start Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/560.-Subarray-Sum-Equals-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/560.-Subarray-Sum-Equals-K/</guid><description>Problem Statement Tags: #dsadeck #subarrays #completed #hashmap Pattern: [[Pattern Prefix Array]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public static int subArraySum(int[] nums, int k) { Integer count = 0, currSum = 0; Map&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); // edge case map.</description></item><item><title/><link>https://acqcc.blog/dsa/566.-Reshape-the-Matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/566.-Reshape-the-Matrix/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 public int[][] matrixReshape(int[][] mat, int r, int c) { int n = mat.</description></item><item><title/><link>https://acqcc.blog/dsa/6095.-Strong-Password-Checker-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/6095.-Strong-Password-Checker-II/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public boolean strongPasswordCheckerII (String password){ boolean charLen = false, lowerCase = false, upperCase = false, digit = false, specialChar = false, adjacentChars = false; String specialChars = &amp;#34;!</description></item><item><title/><link>https://acqcc.blog/dsa/6096.-Successful-Pairs-of-Spells-and-Potions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/6096.-Successful-Pairs-of-Spells-and-Potions/</guid><description>Problem Statement Tags: #dsadeck #arrays #binarysearch Pattern: [[Binary Search#Floor Ceil]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 static class Solution { private int findCeil(int[] arr, long key) { int n = arr.</description></item><item><title/><link>https://acqcc.blog/dsa/61.-Rotate-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/61.-Rotate-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public ListNode rotateRight (ListNode head, int k){ // edge case if(head == null || head.</description></item><item><title/><link>https://acqcc.blog/dsa/6121.-Query-Kth-Smallest-Trimmed-Number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/6121.-Query-Kth-Smallest-Trimmed-Number/</guid><description>6121. Query Kth Smallest Trimmed Number My Submissions Back to Contest</description></item><item><title/><link>https://acqcc.blog/dsa/6122.-Minimum-Deletions-to-Make-Array-Divisible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/6122.-Minimum-Deletions-to-Make-Array-Divisible/</guid><description>6122. Minimum Deletions to Make Array Divisible My Submissions Back to Contest</description></item><item><title/><link>https://acqcc.blog/dsa/632.-Smallest-Range-Covering-Elements-from-K-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/632.-Smallest-Range-Covering-Elements-from-K-Lists/</guid><description>Problem Statement Tags: #dsadeck #linkedlist #heap Pattern: Related : [[Smallest Distinct Window]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Node { List&amp;lt;Integer&amp;gt; list; int index; public boolean hasNext () {return (list.</description></item><item><title/><link>https://acqcc.blog/dsa/645.-Set-Mismatch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/645.-Set-Mismatch/</guid><description>Problem Statement Tags: #easy #arrays #completed #dsadeck Pattern: [[Pattern 1-n range array]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class Solution { // self-freq-arr approach public int[] findErrorNums(int[] nums) { // mark value index -ve subsequently finding duplicate int duplicateNum = -1, missingNum = 0; for (int num : nums) { int val = Math.</description></item><item><title/><link>https://acqcc.blog/dsa/652.-Find-Duplicate-Subtrees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/652.-Find-Duplicate-Subtrees/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
O(n^2) Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 List&amp;lt;TreeNode&amp;gt; res; HashMap&amp;lt;String, Integer&amp;gt; serialCount; // post order serialise String pos(TreeNode root){ if(root == null) return &amp;#34;#&amp;#34;; // serialise curr subtree String serial = root.</description></item><item><title/><link>https://acqcc.blog/dsa/66.-Plus-One/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/66.-Plus-One/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public int[] plusOne(int[] digits) { int n = digits.</description></item><item><title/><link>https://acqcc.blog/dsa/686.-Repeated-String-Match/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/686.-Repeated-String-Match/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 public static int getIndex(String pattern, String text) { int n = pattern.</description></item><item><title/><link>https://acqcc.blog/dsa/713.-Subarray-Product-Less-Than-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/713.-Subarray-Product-Less-Than-K/</guid><description>Problem Statement Tags: #dsadeck #arrays #slidingwindow #completed Pattern: [[Pattern Sliding Window]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public static int numSubarrayProductLessThanK(int[] nums, int k) { // edge case if (k == 0) return 0; // init int start = 0, end = 0, count = 0, currProd = 1; // sliding window while (end &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/73.-Set-Matrix-Zeroes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/73.-Set-Matrix-Zeroes/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public void setZeroes(int[][] matrix) { // flag if initial zero occurs in first row or column boolean fr = false, fc = false; int m = matrix.</description></item><item><title/><link>https://acqcc.blog/dsa/744.-Find-Smallest-Letter-Greater-Than-Target/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/744.-Find-Smallest-Letter-Greater-Than-Target/</guid><description>Problem Statement Tags: #dsadeck #arrays #binarysearch Pattern: [[Binary Search#Floor Ceil]]
Solution 1 2 3 4 5 6 7 8 9 10 public char nextGreatestLetter (char[] letters, char target){ int start = 0, end = letters.</description></item><item><title/><link>https://acqcc.blog/dsa/75.-Sort-Colors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/75.-Sort-Colors/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Array Partitioning]]
Naive Solution 1 2 3 4 5 6 7 8 9 10 11 public void sortColors(int[] nums) { int[] freqs = new int[3]; for (int num : nums) freqs[num]++; int index = 0, color=0; for(int freq : freqs) { while(freq-- &amp;gt; 0) nums[index++] = color; color++; } } Notes Simple Solution, but we need to build a freq array.</description></item><item><title/><link>https://acqcc.blog/dsa/76.-Minimum-Window-Substring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/76.-Minimum-Window-Substring/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related: [[Smallest Distinct Window]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 public String minWindow(String s, String t) { // prepare dict Map&amp;lt;Character, Integer&amp;gt; dict = new HashMap&amp;lt;&amp;gt;(); for(char c : t.</description></item><item><title/><link>https://acqcc.blog/dsa/765.-Couples-Holding-Hands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/765.-Couples-Holding-Hands/</guid><description>Problem Statement Couples Holding Hands - LeetCode
Tags: #easy #arrays #completed #dsadeck Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public void swap(int[] x, int a, int b) { int t = x[a]; x[a] = x[b]; x[b] = t; } public int findIndex(int[] arr, int start, int key) { for (; start &amp;lt; arr.</description></item><item><title/><link>https://acqcc.blog/dsa/767.-Reorganise-Substring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/767.-Reorganise-Substring/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public String reorganizeString(String s) { PriorityQueue&amp;lt;int[]&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;((a, b) -&amp;gt; b[1] - a[1]); int[] freq = new int[26]; // get char freqs for(char ch : s.</description></item><item><title/><link>https://acqcc.blog/dsa/796.-Rotate-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/796.-Rotate-String/</guid><description>Problem Statement Rotate String - LeetCode
Tags: #dsadeck #strings Pattern: Related:
Interview question: Check if one string is a rotation of other string - Stack Overflow</description></item><item><title/><link>https://acqcc.blog/dsa/80.-Remove-Duplicates-from-Sorted-Array-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/80.-Remove-Duplicates-from-Sorted-Array-II/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 public int removeDuplicates(int[] nums) { int i = 0, j = 0; while (j &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/832.-Flipping-an-Image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/832.-Flipping-an-Image/</guid><description>Problem Statement Flipping an Image - LeetCode
Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 public int[][] flipAndInvertImage(int[][] A) { int n = A.</description></item><item><title/><link>https://acqcc.blog/dsa/86.-Partition-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/86.-Partition-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: [[Pattern Array Partitioning]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public ListNode partition(ListNode head, int x) { // iterators ListNode smaller = new ListNode(-1), bigger = new ListNode(-1); // heads ListNode smallHead = smaller, bigHead = bigger; while(head !</description></item><item><title/><link>https://acqcc.blog/dsa/863.-All-Nodes-Distance-K-in-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/863.-All-Nodes-Distance-K-in-Binary-Tree/</guid><description>Problem Statement All Nodes Distance K in Binary Tree - LeetCode Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 Map&amp;lt;Node, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); List&amp;lt;Integer&amp;gt; res; public List&amp;lt;Integer&amp;gt; distanceK (Node root, Node target, int K){ res = new LinkedList&amp;lt;&amp;gt;(); find(root, target); // find distances for all in target path dfs(root, map.</description></item><item><title/><link>https://acqcc.blog/dsa/867.-Transpose-Matrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/867.-Transpose-Matrix/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 public int[][] transpose(int[][] matrix) { int n = matrix.</description></item><item><title/><link>https://acqcc.blog/dsa/876.-Middle-of-the-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/876.-Middle-of-the-Linked-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 public static ListNode getMid (ListNode head) { ListNode slow = head, fast = head; //fast = fast.</description></item><item><title/><link>https://acqcc.blog/dsa/919-Meeting-Rooms-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/919-Meeting-Rooms-II/</guid><description>Problem Statement ==Leetcode Premium Problem== 919 · Meeting Rooms II - LintCode
Tags: #dsadeck #intervals Pattern: [[Pattern Activity Selection Problem]] Related: [[986.</description></item><item><title/><link>https://acqcc.blog/dsa/92.-Reverse-Linked-List-II/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/92.-Reverse-Linked-List-II/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // successor is the continuation of non-reversed LL ListNode successor = null; public ListNode reverseBetween(ListNode head, int l, int r) { if (l == 1) return reverseN(head, r); head.</description></item><item><title/><link>https://acqcc.blog/dsa/920.-Meeting-Rooms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/920.-Meeting-Rooms/</guid><description>Problem Statement Tags: #dsadeck #intervals Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 public boolean canAttendMeetings(List&amp;lt;Interval&amp;gt; intervals) { // Write your code here intervals.</description></item><item><title/><link>https://acqcc.blog/dsa/93.-Restore-IP-Addresses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/93.-Restore-IP-Addresses/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 List&amp;lt;String&amp;gt; res; public void dp (String s, int n, int slot, int slotSize, int[] restored) { if (slotSize &amp;gt; 3 || n !</description></item><item><title/><link>https://acqcc.blog/dsa/98.-Validate-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/98.-Validate-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Iterative Inorder Stack Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public boolean isValidBST (TreeNode node){ Deque&amp;lt;TreeNode&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;(); TreeNode prev = null; while(node!</description></item><item><title/><link>https://acqcc.blog/dsa/986.-Interval-List-Intersections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/986.-Interval-List-Intersections/</guid><description>Problem Statement Tags: #dsadeck #intervals Pattern: Related: [[919 · Meeting Rooms II]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int[][] intervalIntersection(int[][] A, int[][] B) { List&amp;lt;int[]&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); for (int i = 0, j = 0; i &amp;lt; A.</description></item><item><title/><link>https://acqcc.blog/dsa/989.-Add-to-Array-Form-of-Integer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/989.-Add-to-Array-Form-of-Integer/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public List&amp;lt;Integer&amp;gt; addToArrayForm(int[] num, int k) { List&amp;lt;Integer&amp;gt; result = new LinkedList&amp;lt;&amp;gt;(); for (int i = num.</description></item><item><title/><link>https://acqcc.blog/dsa/Balance-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Balance-Binary-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public int checkHeight (TreeNode root) { if (root == null) return 0; int lh = checkHeight(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Bank-Transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Bank-Transactions/</guid><description>Problem Statement Tags: #dsadeck #dp Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 static HashMap&amp;lt;Integer, HashMap&amp;lt;Integer, Integer&amp;gt;&amp;gt; cache; public static int dp(int[] nums, int i, int sum) { if (i &amp;gt;= nums.</description></item><item><title/><link>https://acqcc.blog/dsa/Binary-Search-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Binary-Search-Tree/</guid><description>left child &amp;lt; root &amp;lt; right chilid inorder traversal gives sorted array search complexity is O(h) h=height Fundamental Programs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 public static TreeNode insert(TreeNode root, int val) { if (root == null) return new TreeNode(val); if (val &amp;lt; root.</description></item><item><title/><link>https://acqcc.blog/dsa/Binary-Tree-to-DLL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Binary-Tree-to-DLL/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Node last; Node inorder (Node root) { if(root == null) return root; inorder(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Binary-Tree/</guid><description>Build Tree Preorder 1 2 3 4 5 6 7 8 9 10 11 12 // Build Tree - Preorder public Node buildTree(int[] nodes) { idx++; if (nodes[idx] == -1) return null; Node newNode = new Node(nodes[idx]); newNode.</description></item><item><title/><link>https://acqcc.blog/dsa/BT-Sum-at-Kth-Level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/BT-Sum-at-Kth-Level/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public int KSum(Node root, int k) { int level = 0, sum = 0; Queue&amp;lt;Node&amp;gt; q = new LinkedList&amp;lt;&amp;gt;(); q.</description></item><item><title/><link>https://acqcc.blog/dsa/Check-if-Tree-is-Isomorphic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Check-if-Tree-is-Isomorphic/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 boolean isIsomorphic(Node root1, Node root2) { // code here.</description></item><item><title/><link>https://acqcc.blog/dsa/Check-whether-BST-contains-Dead-End/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Check-whether-BST-contains-Dead-End/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related: [[1008. Construct Binary Search Tree from Preorder Traversal]]
Solution 1 2 3 4 5 6 7 8 9 public static boolean isDeadEnd(Node n){return check(n, 0, Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/Clone-LL-with-Random-Pointer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Clone-LL-with-Random-Pointer/</guid><description>Problem Statement Clone a linked list with next and random pointer | Practice | GeeksforGeeks
Tags: #dsadeck #linkedlist Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/Convert-Sorted-List-to-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Convert-Sorted-List-to-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related: [[Balance Binary Tree]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public Node sortedListToBST(ListNode head) { return bstify(head, null);} // [head, tail) public Node bstify(ListNode head, ListNode tail) { if (head == tail) return null; // get mid ListNode mid = head, fast = mid.</description></item><item><title/><link>https://acqcc.blog/dsa/Count-and-Sum-of-Nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Count-and-Sum-of-Nodes/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // Count Nodes O(n) public static int countNodes (Node root) { if(root == null) return 0; int left = countNodes(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Count-Customers-Who-Did-Not-Get-A-Computer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Count-Customers-Who-Did-Not-Get-A-Computer/</guid><description>Problem Statement Count Customers Who Did Not Get A Computer - Coding Ninjas Codestudio
Strings version : Function to find Number of customers who could not get a computer - GeeksforGeeks</description></item><item><title/><link>https://acqcc.blog/dsa/Count-of-Subsets-witth-given-Sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Count-of-Subsets-witth-given-Sum/</guid><description>Problem Statement Count of subsets with sum equal to X - GeeksforGeeks
Tags: #dsadeck #dp Pattern: Related:
Brute Force Solution 1 2 3 4 5 6 7 8 9 public int count (int[] nums, int n, int target){ if(n &amp;lt; 0) return target == 0 ?</description></item><item><title/><link>https://acqcc.blog/dsa/Count-Palindromic-Subsequences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Count-Palindromic-Subsequences/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 long MOD = (long) Math.</description></item><item><title/><link>https://acqcc.blog/dsa/Count-the-Reversals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Count-the-Reversals/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related: [[1963. Minimum Number of Swaps to Make the String Balanced]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 int countRev (String s) { // your code here Deque&amp;lt;Character&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;(); int rev = 0; for(char ch : s.</description></item><item><title/><link>https://acqcc.blog/dsa/Delete-Nodes-With-Greater-Value-on-Right/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Delete-Nodes-With-Greater-Value-on-Right/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 Node compute(Node head) { // your code here if(head == null || head.</description></item><item><title/><link>https://acqcc.blog/dsa/Diagonal-Traversal-of-BT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Diagonal-Traversal-of-BT/</guid><description>Problem Statement Diagonal Traversal | Interviewbit
Tags: #dsadeck #binarytrees Pattern: [[Pattern Binary Tree Axis]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class AxisNode { int axis; TreeNode node; AxisNode(int axis, TreeNode node) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/Diameter-of-a-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Diameter-of-a-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[Balance Binary Tree]]
Solution O(N^2) 1 2 3 4 5 6 7 8 9 10 11 12 13 public static int diameter (Node root) { if(root == null) return 0; // recurse for left and right int diaLeft = diameter(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Dynamic-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Dynamic-Programming/</guid><description>Knapsack Fractional Unbouned [[01 Knapsack]]</description></item><item><title/><link>https://acqcc.blog/dsa/Edit-Distance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Edit-Distance/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related: [[1143. Longest Common Subsequence]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Integer[][] cache; int dp(char[] edit, char[] target, int n1, int n2) { // base condition if (n1 &amp;lt; 0 || n2 &amp;lt; 0) return (n1 &amp;gt;= n2) ?</description></item><item><title/><link>https://acqcc.blog/dsa/FInd-String-in-Grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/FInd-String-in-Grid/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public int[][] searchWord(char[][] grid, String word) { // Code here int [] x = new int[] {0, 1, 1, 1, 0, -1, -1, -1}; int [] y = new int[] {1, 1, 0, -1, -1, -1, 0, 1}; int n = grid.</description></item><item><title/><link>https://acqcc.blog/dsa/First-Non-Repeating-Character-in-Stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/First-Non-Repeating-Character-in-Stream/</guid><description>Problem Statement Tags: #dsadeck #linkedlist #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public String FirstNonRepeating (String str){ int[] vis = new int[26]; LinkedList&amp;lt;Character&amp;gt; q = new LinkedList&amp;lt;&amp;gt;(); StringBuilder res = new StringBuilder(); for(int i = 0; i &amp;lt; str.</description></item><item><title/><link>https://acqcc.blog/dsa/First-Repeating-Element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/First-Repeating-Element/</guid><description>Problem Statement Tags: #easy #arrays #completed #hashmap #dsadeck Pattern: [[Frequency]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { // freqArr approach public static int firstRepeated (int[] arr, int n){ int[] freqArr = new int[1_000_000]; Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/Flatten-a-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Flatten-a-BST/</guid><description>Problem Statement Flatten BST To A Sorted List (codingninjas.com)
Tags: #dsadeck #bst Pattern: Related:
Trivial Solution #1 Create an Inorder Queue&amp;lt;Node&amp;gt;, then iterate over it and reorder the BST, something like [[1382.</description></item><item><title/><link>https://acqcc.blog/dsa/Flatten-a-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Flatten-a-Linked-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related: [[23. Merge k Sorted Lists]]
Solution PriorityQueue This is technically a O(1) space solution, since we take the contraint (N*M) &amp;lt;=100</description></item><item><title/><link>https://acqcc.blog/dsa/Flatten-Binary-Tree-to-LL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Flatten-Binary-Tree-to-LL/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: [[Pattern Binary Tree Traversal]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 TreeNode prev = null; // right-first postorder public void postorder (TreeNode root) { if(root == null) return; postorder(root.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Add-1-to-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Add-1-to-Linked-List/</guid><description>Problem Statement Add 1 to a number represented as linked list | Practice | GeeksforGeeks
Tags: #dsadeck #linkedlist Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Boundary-Traversal-of-BT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Boundary-Traversal-of-BT/</guid><description>Problem Statement Boundary Traversal of binary tree | Practice | GeeksforGeeks Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ArrayList&amp;lt;Integer&amp;gt; res; private boolean isLeaf (Node node) {return node.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Check-if-Linked-List-is-Palindrome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Check-if-Linked-List-is-Palindrome/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public boolean isPalindrome (Node head){ if(head.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Choclate-Distribution-Problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Choclate-Distribution-Problem/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Sliding Window]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 public long findMinDiff (ArrayList&amp;lt;Integer&amp;gt; nums, int n, int m) { Collections.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Common-Elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Common-Elements/</guid><description>Problem Statement Common elements | Practice | GeeksforGeeks Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public ArrayList&amp;lt;Integer&amp;gt; commonElements(int[] A, int[] B, int[] C, int n1, int n2, int n3) { int i1 = 0, i2 = 0, i3 = 0; ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); while (i1 &amp;lt; n1 &amp;amp;&amp;amp; i2 &amp;lt; n2 &amp;amp;&amp;amp; i3 &amp;lt; n3) { if (A[i1] &amp;lt; B[i2]) i1++; else if (B[i2] &amp;lt; C[i3]) i2++; else if (C[i3] &amp;lt; A[i1]) i3++; else if (A[i1] == B[i2] &amp;amp;&amp;amp; B[i2] == C[i3]) { if(res.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Count-Inversions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Count-Inversions/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public long merge(long[] nums, int start, int mid, int end) { long[] t1 = Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Detect-Loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Detect-Loop/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 public static boolean detectLoop(Node head){ Node slow = head, fast = head; while(slow !</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Factorials-of-large-numbers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Factorials-of-large-numbers/</guid><description>Problem Statement Tags: #dsadeck #arrays #arithmetic Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public ArrayList&amp;lt;Integer&amp;gt; factorial(int n) { ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); res.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Intersection-of-Two-Sorted-LLs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Intersection-of-Two-Sorted-LLs/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public static Node findIntersection(Node head1, Node head2) { Node ans = new Node(-1), ansHead = ans; while(head1 !</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Kth-Largest-Subarray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Kth-Largest-Subarray/</guid><description>Problem Statement K-th Largest Sum Contiguous Subarray | Practice | GeeksforGeeks
Tags: #dsadeck #arrays #completed #subarrays Pattern:[[Pattern Sliding Window]]</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Length-of-smallest-subarray-removed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Length-of-smallest-subarray-removed/</guid><description>Problem Statement Length of smallest subarray to be removed to make sum of remaining elements divisible by K - GeeksforGeeks</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Longest-Subarray-having-Sum-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Longest-Subarray-having-Sum-K/</guid><description>Problem Statement Longest sub-array having sum k - GeeksforGeeks
Tags: #dsadeck #arrays Pattern: [[Pattern Prefix Array]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 static int lenOfLongSubarr(int[] arr, int n, int k) { // HashMap to store (sum, index) tuples HashMap&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); int sum = 0, maxLen = 0; // traverse the given array for (int i = 0; i &amp;lt; n; i++) { // accumulate sum sum += arr[i]; // when subarray starts from index &amp;#39;0&amp;#39; if (sum == k) maxLen = i + 1; // make an entry for &amp;#39;sum&amp;#39; if it is // not present in &amp;#39;map&amp;#39; if (!</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Maximum-Product-Subarray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Maximum-Product-Subarray/</guid><description>Problem Statement Tags: #dsadeck #arrays #subarrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public long maxProduct (int[] nums, int n){ long prefixProduct = 1, suffixProduct=1, maxProduct = Long.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Median-of-2-Sorted-Arrays-of-Same-Size/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Median-of-2-Sorted-Arrays-of-Same-Size/</guid><description>Problem Statement Tags: #dsadeck #arrays #mergesort Pattern: Related: [[4. Median of Two Sorted Arrays]]
Solution 1 2 3 4 5 6 7 8 9 10 11 public int getMedian (int[] nums1, int[] nums2){ int i1 = 0, i2 = 0, n = nums1.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Merge-k-Sorted-Arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Merge-k-Sorted-Arrays/</guid><description>Problem Statement Tags: #dsadeck #arrays #heap Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Node { int index; int[] arr; Node (int index, int[] arr) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Merge-Without-Extra-Space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Merge-Without-Extra-Space/</guid><description>Problem Statement Given two sorted arrays arr1[] of size N and arr2[] of size M. Each array is sorted in non-decreasing order.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Minimise-the-Heights/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Minimise-the-Heights/</guid><description>Problem Statement Tags: #dsadeck #arrays #incomplete Pattern:
Solution Minimize the maximum difference between heights || Love Babbar DSA sheet - YouTube</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Minimum-Number-of-Jumps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Minimum-Number-of-Jumps/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public int jump(int[] nums){ int limit = nums[0], jumps = 1, i = 0, n = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Minimum-swaps-and-K-together/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Minimum-swaps-and-K-together/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Sliding Window]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int minSwap(int[] nums, int n, int k) { int good = 0; for (int num : nums) if (num &amp;lt;= k) good++; if(good == 0) return 0; // sliding window of size &amp;#39;good&amp;#39; int bad = 0, start = 0, end = good - 1; // find how many bad for (int i = start; i &amp;lt;= end; i++) if(nums[i] &amp;gt; k) bad++; // init minBad int minBad = bad; start++;end++; while(end &amp;lt; n) { if(nums[start-1] &amp;gt; k) bad--; // check dropped element if(nums[end] &amp;gt; k) bad++; // check picked element minBad = Math.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Palindromic-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Palindromic-Array/</guid><description>Problem Statement Palindromic Array | Practice | GeeksforGeeks
Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 for (int num : nums) { int temp = num, revNum = 0; while(temp !</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Rearrange-array-in-alternating-positive-negative-items-with-O1-extra-space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Rearrange-array-in-alternating-positive-negative-items-with-O1-extra-space/</guid><description>Problem Statement #2 - Unordereed InPlace O(1) space
Tags: #dsadeck #arrays Pattern:
Solution 1 2 3 4 5 6 7 8 9 10 public int[] rearrangeUnordered(int[] nums) { int ni = 0; // negative index for (int i = 0; i &amp;lt; nums.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Remove-Duplicates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Remove-Duplicates/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // O(1) space public ListNode removeDuplicates (ListNode head){ ListNode next = head, node = head; next = next.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Remove-Loop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Remove-Loop/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution [[142. Linked List Cycle II]] but with a lagging pointer
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public void removeCycle (ListNode head) { ListNode fast = head, slow = head; ListNode prev = new ListNode(); // lagging pointer while(fast!</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Reverse-Doubly-Linked-List/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Reverse-Doubly-Linked-List/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public static Node reverseDLL(Node head) { //Your code here Node prev = null; while (head !</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Smallest-Subarray-Sum-Smaller-Than-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Smallest-Subarray-Sum-Smaller-Than-K/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: [[Pattern Two Pointer]] Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 public static int smallestSubWithSum(int nums[], int n, int x) { int start = 0, end = start, minLen = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Split-Circular-Linked-List-into-Two-Halves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Split-Circular-Linked-List-into-Two-Halves/</guid><description>Problem Statement Split a Circular Linked List into two halves | Practice | GeeksforGeeks
Tags: #dsadeck #linkedlist Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Sum-of-Longest-Bloodline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Sum-of-Longest-Bloodline/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class hs implements Comparable&amp;lt;hs&amp;gt;{ int height; int sum; hs (int height, int sum) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Three-Way-Paritioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Three-Way-Paritioning/</guid><description>Problem Statement Three way partitioning | Practice | GeeksforGeeks Tags: #dsadeck #arrays #twopointer Pattern: [[Pattern Array Partitioning]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 //Function to partition the array around the range such //that array is divided into three parts.</description></item><item><title/><link>https://acqcc.blog/dsa/GFG-Triplet-Sum-in-Array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/GFG-Triplet-Sum-in-Array/</guid><description>Problem Statement Tags: #dsadeck #arrays #arithmetic Pattern: [[Pattern Two Pointer]] Related: [[15. 3Sum]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 public boolean find3Numbers(int[] nums, int n, int k) { Arrays.</description></item><item><title/><link>https://acqcc.blog/dsa/Given-n-appointments-find-all-conflicting-appointments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Given-n-appointments-find-all-conflicting-appointments/</guid><description>Problem Statement Given n appointments, find all conflicting appointments - GeeksforGeeks
Tags: #dsadeck #bst Pattern: Related:
Approach 1 Create Points Datastructure, and sort all the points, and the other point they belong to Iterate add overlapping interval to a Set&amp;lt;Interval&amp;lt;Point, Point&amp;gt;</description></item><item><title/><link>https://acqcc.blog/dsa/Height-of-a-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Height-of-a-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
1 2 3 4 5 6 7 8 public static int height(Node root) { if (root == null) return 0; int leftHeight = height(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Inorder-Predecessor-and-Successor-in-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Inorder-Predecessor-and-Successor-in-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Node inorderPredecessor(Node node, int key) { Node pre = null; while(node !</description></item><item><title/><link>https://acqcc.blog/dsa/Iterative-Traversals-of-BT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Iterative-Traversals-of-BT/</guid><description>Tags: #dsadeck #binarytrees Pattern: Related:
For recrusive checkout: [[Binary Tree#Traversals]]
Preorder Binary Tree Preorder Traversal - LeetCode
node -&amp;gt; left -&amp;gt; right</description></item><item><title/><link>https://acqcc.blog/dsa/Job-Sequencing-Problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Job-Sequencing-Problem/</guid><description>Problem Statement Job Sequencing Problem | Practice | GeeksforGeeks
1 2 3 4 5 6 7 8 9 class Job { int profit; int deadline; Job(int p, int d) { profit = p; deadline = d; } } Tags: #dsadeck #greedy #heap Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/KMP-Algo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/KMP-Algo/</guid><description>Problem Statement LPS
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // O(2n) public void getLps(String needle, int[] lps) { int currLps = 0, i = 1; while (i &amp;lt; needle.</description></item><item><title/><link>https://acqcc.blog/dsa/Kth-Ancestor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Kth-Ancestor/</guid><description>Problem Statement Kth Ancestor in a Tree | Practice | GeeksforGeeks
Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 static class Ancestor { int distance = -10; Ancestor(int distance){ this.</description></item><item><title/><link>https://acqcc.blog/dsa/Largest-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Largest-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Approach: just iterative inorder traversal, with a max and a count of sorted elments.</description></item><item><title/><link>https://acqcc.blog/dsa/LCA-in-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/LCA-in-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 Node LCA(Node root, int n1, int n2) { if(n1 &amp;gt; n2) return LCA(root, n2, n1); if(root == null) return null; if(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Leaf-at-same-level/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Leaf-at-same-level/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related: [[Balance Binary Tree]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { // perfect node has both left and right children boolean isPerfectNode (Node node) {return node.</description></item><item><title/><link>https://acqcc.blog/dsa/Left-and-Right-View/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Left-and-Right-View/</guid><description>Problem Statement Left View of Binary Tree | Practice | GeeksforGeeks
Tags: #dsadeck #binarytrees Pattern: Related:
Left Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 HashMap&amp;lt;Integer, Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); public void preorder (Node root, int depth) { if(root == null) return; // if depth not reached before, put value if(!</description></item><item><title/><link>https://acqcc.blog/dsa/Longest-Palindrome-in-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Longest-Palindrome-in-String/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Return Length Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public int longestPalin (String str){ // code here char[] chars = str.</description></item><item><title/><link>https://acqcc.blog/dsa/Longest-Repeating-Subsequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Longest-Repeating-Subsequence/</guid><description>Problem Statement Tags: #dsadeck #strings #dp Pattern: Related: [[1143. Longest Common Subsequence]]
DP Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Integer[][] cache; public int LongestRepeatingSubsequence(String str) { cache = new Integer[str.</description></item><item><title/><link>https://acqcc.blog/dsa/Maxiumum-Sum-of-Non-Adjacent-Nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Maxiumum-Sum-of-Non-Adjacent-Nodes/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: [[Pattern Non-Adjacent Sum]] Related: [[198. House Robber]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Pair { int inSum; int exSum; Pair (int inSum, int exSum) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/Merge-2-BSTs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Merge-2-BSTs/</guid><description>Problem Statement Merge Two BSTs (codingninjas.com)
Tags: #dsadeck #bst Pattern: Related:
List Sort Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public ArrayList&amp;lt;Node&amp;gt; mergeLists(List&amp;lt;Node&amp;gt; l1, List&amp;lt;Node&amp;gt; l2) { ArrayList&amp;lt;Node&amp;gt; nodes = new ArrayList&amp;lt;&amp;gt;(); int i = 0, j = 0; while (i &amp;lt; l1.</description></item><item><title/><link>https://acqcc.blog/dsa/Merge-2-Sorted-Linked-Lists/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Merge-2-Sorted-Linked-Lists/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 ListNode merge(ListNode a, ListNode b) { if(a == null) return b; if(b == null) return a; ListNode smaller, larger; smaller = (a.</description></item><item><title/><link>https://acqcc.blog/dsa/Minimum-Characters-to-be-added-to-front-to-make-string-Palindrome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Minimum-Characters-to-be-added-to-front-to-make-string-Palindrome/</guid><description>Problem Statement Minimum characters to be added at front to make string palindrome - GeeksforGeeks
Tags: #dsadeck #strings Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/Minimum-Number-of-Flips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Minimum-Number-of-Flips/</guid><description>Problem Statement Min Number of Flips | Practice | GeeksforGeeks
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 public int minFlips(String S) { // Code here int countZero = 0, countOne = 0; // zero-start boolean flag = false; for(char ch : S.</description></item><item><title/><link>https://acqcc.blog/dsa/Minimum-Number-of-Merges-to-make-Palindrome/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Minimum-Number-of-Merges-to-make-Palindrome/</guid><description>Problem Statement Find minimum number of merge operations to make an array palindrome - GeeksforGeeks
Tags: #dsadeck #arrays Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/Morris-Traversals-of-Binary-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Morris-Traversals-of-Binary-Tree/</guid><description>[[Binary Tree#Traversals]]
Problem Statement Traverse a binary tree (inorder/postorder/preorder), using O(1) space, return root of tree
Definition Threaded Tree ![[Pasted image 20220713173904.</description></item><item><title/><link>https://acqcc.blog/dsa/N-meetings-in-one-room/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/N-meetings-in-one-room/</guid><description>Problem Statement Tags: #dsadeck #intervals Pattern: Related: [[919 · Meeting Rooms II]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 static class Interval{ public int start; public int end; Interval(int s, int e) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/Next-Permutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Next-Permutation/</guid><description>Problem Statement Tags: #dsadeck #arrays Pattern: Related: [[31. Next Permutation]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 public static void swap(int[] x, int a, int b) { int t = x[a]; x[a] = x[b]; x[b] = t; } private static int getSuccessor(int[] nums, int pre) { int i = nums.</description></item><item><title/><link>https://acqcc.blog/dsa/Numbers-divisible-by-a-or-b-in-range-n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Numbers-divisible-by-a-or-b-in-range-n/</guid><description>Problem Statement Tags: #dsadeck #arithmetic Pattern: [[Pattern Inclusion Exclusion Principle]] Related:
Solution Keyword OR
1 2 3 4 5 6 7 int divisible (int n, int a, int b) { int countA = n/a; int countB = n/b; int countAB = n/(a*b); return countA + countB - countAB; } TC : SC :</description></item><item><title/><link>https://acqcc.blog/dsa/Parenthesis-Checker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Parenthesis-Checker/</guid><description>Problem Statement Tags: #dsadeck #strings #stacks Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 static boolean ispar(String str) { // add your code here Deque&amp;lt;Character&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;(); for (char ch : str.</description></item><item><title/><link>https://acqcc.blog/dsa/Permutations-of-a-Given-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Permutations-of-a-Given-String/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ArrayList&amp;lt;String&amp;gt; res; public void swap (char[] chars, int a, int b ) { char temp = chars[a]; chars[a] = chars[b]; chars[b] = temp; } public void p (char[] chars, int start) { if(start == chars.</description></item><item><title/><link>https://acqcc.blog/dsa/Police-and-Thieves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Police-and-Thieves/</guid><description>Problem Statement Tags: #dsadeck #greedy Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public int catchThieves(char[] arr, int n, int k) { int t = 0, p = 0, caught = 0; // set p and t while (p &amp;lt; n &amp;amp;&amp;amp; arr[p] !</description></item><item><title/><link>https://acqcc.blog/dsa/Populate-Inorder-Successor-for-all-Nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Populate-Inorder-Successor-for-all-Nodes/</guid><description>Problem Statement Populate Inorder Successor for all nodes | Practice | GeeksforGeeks
Tags: #dsadeck #bst Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public void populateNext(Node root){ Deque&amp;lt;Node&amp;gt; stack = new LinkedList&amp;lt;&amp;gt;(); Node node = root, pre = null; while(node!</description></item><item><title/><link>https://acqcc.blog/dsa/Print-all-Subsequences-of-a-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Print-all-Subsequences-of-a-String/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 static void dp(char[] s, int n, StringBuilder sb) { if(n &amp;lt;= 0) { System.</description></item><item><title/><link>https://acqcc.blog/dsa/Rabin-Karp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Rabin-Karp/</guid><description>Problem Statement String Matching with Rolling Hash in less than $O(m*n)$ Abdul Bari Explanation Explanation and Code
Tags: #dsadeck #strings #concept Pattern: [[Pattern String Matching]] Related: [[KMP Algo]]</description></item><item><title/><link>https://acqcc.blog/dsa/Remove-Consecutive-Characters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Remove-Consecutive-Characters/</guid><description>Problem Statement Remove Consecutive Characters | Practice | GeeksforGeeks Remove adjacent duplicates recursively
Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public char add (StringBuilder sb, String s, int i) { if(i == s.</description></item><item><title/><link>https://acqcc.blog/dsa/Replace-every-element-with-the-least-greater-element-on-its-right/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Replace-every-element-with-the-least-greater-element-on-its-right/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Trivial Solution ❌ 1 2 3 4 5 6 7 8 9 10 11 public static ArrayList&amp;lt;Integer&amp;gt; findLeastGreater(int n, int[] arr) { // code here ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(n); for(int i = 0; i &amp;lt; n ; i++) { int min = -1; for(int j = i+1 ; j &amp;lt; n ; j++) min = (arr[j] &amp;gt; arr[i] &amp;amp;&amp;amp; (min == -1 || arr[j] &amp;lt; min)) ?</description></item><item><title/><link>https://acqcc.blog/dsa/Reverse-Doubly-Linked-List-in-Groups-of-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Reverse-Doubly-Linked-List-in-Groups-of-K/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public Node revListInGroupOfGivenSize(Node head, int K){ Node curr = head, prev = null; int count = 0; // let prev be the leading pointer of the new reversed LL // and keep inserting `curr` (leading ptr of leftover LL) // before `prev` while(curr !</description></item><item><title/><link>https://acqcc.blog/dsa/Reverse-Level-Order-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Reverse-Level-Order-Traversal/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Once you know [[Binary Tree#Level Order Traversals|Level Order Traversal]] ,
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public ArrayList&amp;lt;Integer&amp;gt; reverseLevelOrder(Node root) { if(root == null) return new ArrayList&amp;lt;Integer&amp;gt;(); // result list ArrayList&amp;lt;Integer&amp;gt; res = new ArrayList&amp;lt;&amp;gt;(); // queue to iterate over BT Queue&amp;lt;Node&amp;gt; q = new LinkedList&amp;lt;Node&amp;gt;(); q.</description></item><item><title/><link>https://acqcc.blog/dsa/Reverse-LinkedList-in-Groups-of-K/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Reverse-LinkedList-in-Groups-of-K/</guid><description>Problem Statement Reverse a Linked List in groups of given size. | Practice | GeeksforGeeks Tags: #dsadeck #linkedlist Pattern: Related:</description></item><item><title/><link>https://acqcc.blog/dsa/Shortest-Impossible-Sequence-of-Rolls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Shortest-Impossible-Sequence-of-Rolls/</guid><description>Problem Statement Shortest Impossible Sequence of Rolls - LeetCode Contest
Tags: #dsadeck #dp Pattern: Related:
Solution TC : &amp;lt;% tp.</description></item><item><title/><link>https://acqcc.blog/dsa/Smallest-Distinct-Window/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Smallest-Distinct-Window/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related: [[632. Smallest Range Covering Elements from K Lists]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public int getInterval (Integer[] indices) { int min = Integer.</description></item><item><title/><link>https://acqcc.blog/dsa/Smallest-sum-contiguous-subarray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Smallest-sum-contiguous-subarray/</guid><description>Problem Statement Smallest sum contiguous subarray | Practice | GeeksforGeeks
Tags: #easy #arrays #completed #subarrays #dsadeck Pattern: [[Pattern Kadane&amp;rsquo;s Algorithm]]</description></item><item><title/><link>https://acqcc.blog/dsa/Sort-Linked-List-if-0s-1s-and-2s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Sort-Linked-List-if-0s-1s-and-2s/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related: [[GFG Three Way Paritioning]] Segregate even and odd nodes in a Link List | Practice | GeeksforGeeks</description></item><item><title/><link>https://acqcc.blog/dsa/Subtree-of-Another-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Subtree-of-Another-Tree/</guid><description>Problem Statement Subtree of Another Tree - LeetCode
Tags: #dsadeck #binarytrees Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 private boolean compare(Node A, Node B) { // BASE CASES if (A == null &amp;amp;&amp;amp; B == null) return true; // if both are null if (A == null || B == null) return false; // if only one is null // if A == B, check left and right if (A.</description></item><item><title/><link>https://acqcc.blog/dsa/Sum-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Sum-Tree/</guid><description>Problem Statement Tags: #dsadeck #binarytrees Pattern: Related:
Check if BT is Sum Tree Sum Tree | Practice | GeeksforGeeks</description></item><item><title/><link>https://acqcc.blog/dsa/Swap-Kth-nodes-from-ends/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Swap-Kth-nodes-from-ends/</guid><description>Problem Statement Tags: #dsadeck #linkedlist Pattern: Related: [[1721. Swapping Nodes in a Linked List]]
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void swap(Node pa, Node pb){ Node a = pa.</description></item><item><title/><link>https://acqcc.blog/dsa/Top-Bottom-View-of-a-Tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Top-Bottom-View-of-a-Tree/</guid><description>Problem Statement Top View of Binary Tree | Practice | GeeksforGeeks Tags: #dsadeck #binarytrees Pattern: Related:
Top View Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 static class AxisNode { int axis; Node node; AxisNode(int axis, Node node) { this.</description></item><item><title/><link>https://acqcc.blog/dsa/Transform-String/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Transform-String/</guid><description>Problem Statement Tags: #dsadeck #strings Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 int transform (String A, String B) { // check if possible if (A.</description></item><item><title/><link>https://acqcc.blog/dsa/Two-Sum-in-BST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Two-Sum-in-BST/</guid><description>Problem Statement Tags: #dsadeck #bst Pattern: Related:
Solution 1 2 3 4 5 6 7 8 9 10 11 12 HashSet&amp;lt;Integer&amp;gt; set = new HashSet&amp;lt;&amp;gt;(); public boolean findTarget(TreeNode root, int k) { if(root == null) return false; boolean left = findTarget(root.</description></item><item><title/><link>https://acqcc.blog/dsa/Two-Sum-with-2-BSTs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Two-Sum-with-2-BSTs/</guid><description>Problem Statement Brothers From Different Roots | Practice | GeeksforGeeks
Tags: #dsadeck #bst Pattern: Related: [[Iterative Traversals of BT#Inorder]]</description></item><item><title/><link>https://acqcc.blog/dsa/Union-and-Intersection-of-Arrays/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Union-and-Intersection-of-Arrays/</guid><description>Problem Statement Union of two arrays | Practice | GeeksforGeeks Intersection of Two Arrays - LeetCode
Tags: #dsadeck #arrays Pattern:</description></item><item><title/><link>https://acqcc.blog/dsa/Vertical-Traversal-of-BT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Vertical-Traversal-of-BT/</guid><description>Problem Statement Given a Binary Tree, find the vertical traversal of it starting from the leftmost level to the rightmost level.</description></item><item><title/><link>https://acqcc.blog/dsa/Word-Wrap-Problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Word-Wrap-Problem/</guid><description>Problem Statement Tags: #dsadeck #strings #dp Pattern: Related:
Incomplete Solution #todoleetcode
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Integer[][] cache; public int dp(int[] nums, int k, int n, int left) { if (n == 0) return cache[n][left] = nums[n] &amp;lt; left ?</description></item><item><title/><link>https://acqcc.blog/dsa/Zig-Zag-Traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/dsa/Zig-Zag-Traversal/</guid><description>Problem Statement Binary Tree Zigzag Level Order Traversal - LeetCode
Tags: #dsadeck #binarytrees Pattern: Related:
Solution Reverse if level is odd</description></item><item><title>Callouts</title><link>https://acqcc.blog/notes/callouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/callouts/</guid><description>Callout support Quartz supports the same Admonition-callout syntax as Obsidian.
This includes
12 Distinct callout types (each with several aliases) Collapsable callouts See documentation on supported types and syntax here.</description></item><item><title>CJK + Latex Support (测试)</title><link>https://acqcc.blog/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95/</guid><description>Chinese, Japanese, Korean Support 几乎在我们意识到之前，我们已经离开了地面。
우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.
私たちがそれを知るほぼ前に、私たちは地面を離れていました。
Latex Block math works with two dollar signs $$.</description></item><item><title>Configuration</title><link>https://acqcc.blog/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.</description></item><item><title>Custom Domain</title><link>https://acqcc.blog/notes/custom-Domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/custom-Domain/</guid><description>Registrar This step is only applicable if you are using a custom domain! If you are using a &amp;lt;YOUR-USERNAME&amp;gt;.github.io domain, you can skip this step.</description></item><item><title>Hosting with Docker</title><link>https://acqcc.blog/notes/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/docker/</guid><description>If you want to host Quartz on a machine without using a webpage hosting service, it may be easier to install Docker Compose and follow the instructions below than to install Quartz&amp;rsquo;s dependencies manually.</description></item><item><title>Ignoring Notes</title><link>https://acqcc.blog/notes/ignore-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/ignore-notes/</guid><description>Quartz Ignore Edit ignoreFiles in config.toml to include paths you&amp;rsquo;d like to exclude from being rendered.
1 2 3 4 5 6 .</description></item><item><title>Quartz Philosophy</title><link>https://acqcc.blog/notes/philosophy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/philosophy/</guid><description>“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.</description></item><item><title>Search</title><link>https://acqcc.blog/notes/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/search/</guid><description>Quartz supports two modes of searching through content.
Full-text Full-text search is the default in Quartz. It produces results that exactly match the search query.</description></item><item><title>Showcase</title><link>https://acqcc.blog/notes/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/showcase/</guid><description>Want to see what Quartz can do? Here are some cool community gardens :)
Quartz Documentation (this site!) Jacky Zhao&amp;rsquo;s Garden Scaling Synthesis - A hypertext research notebook AWAGMI Intern Notes Shihyu&amp;rsquo;s PKM SlRvb&amp;rsquo;s Site Course notes for Information Technology Advanced Theory Brandon Boswell&amp;rsquo;s Garden Siyang&amp;rsquo;s Courtyard Data Dictionary 🧠 sspaeti.</description></item><item><title>Troubleshooting and FAQ</title><link>https://acqcc.blog/notes/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/troubleshooting/</guid><description>Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.
While you&amp;rsquo;re here, join our Discord :)</description></item><item><title>Updating</title><link>https://acqcc.blog/notes/updating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://acqcc.blog/notes/updating/</guid><description>Haven&amp;rsquo;t updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update!</description></item></channel></rss>